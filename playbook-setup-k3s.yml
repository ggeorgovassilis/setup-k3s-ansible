---
# ###########################
# common setup for all VMS
# ###########################

  - name: Common setup
    hosts: all
    become: yes
    become_user: root
    tasks:
    
    - name: upgrade all packages
      dnf:
        name: "*"
        state: latest
      register: dnf_upgrade

    - name: Allow legacy crypto policy
      shell:
         "update-crypto-policies --show | grep -q LEGACY || ( update-crypto-policies --set LEGACY & echo CHANGED)"
      register: cmd_update_crypto_policies
      changed_when: '"CHANGED" in cmd_update_crypto_policies.stdout'
      tags: cryptopolicies

    - name: Add IP address of all hosts to all hosts
      lineinfile:
        dest: /etc/hosts
        regexp: '.*{{ item }}$'
        line: "{{ hostvars[item].private_ip }} {{item}}"
        state: present
      when: hostvars[item].private_ip is defined
      with_items: "{{ groups.all }}"
    
    - name: Disable firewall
      systemd: name=firewalld enabled=no
      ignore_errors: true 

    - name: Set system property vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: 262144
        sysctl_set: yes
        state: present

    - name: Determine if a rebootis required
      set_fact:
        needsReboot: '{{ cmd_update_crypto_policies.changed or dnf_upgrade.changed }}'

    - debug: var=needsReboot
    - name: Unconditionally reboot the machine with all defaults
      ansible.builtin.reboot:
      when: needsReboot == "true"
      
    - name: Install the latest version of tar
      ansible.builtin.dnf:
        name: tar
        state: latest

# ####################
# Master setup
# ####################

  - name: Master setup
    hosts: masters
    become: yes
    become_user: root
    tasks:

    - name: Install k3s master
      shell: curl -sfL https://get.k3s.io/ | INSTALL_K3S_EXEC="--node-ip={{private_ip}} --flannel-iface={{ private_interface }}" sh -s - --write-kubeconfig-mode 644
    - name: Enable k3s agent
      systemd: name=k3s state=started enabled=yes
    - name: Check k3s token
      shell: cat /var/lib/rancher/k3s/server/node-token | cut -d':' -f 4
      register: K3S_TOKEN
      changed_when: false


    - name: Store K3S_TOKEN
      set_fact:
        K3S_TOKEN: "{{ K3S_TOKEN.stdout }}"
        delegate_to: emaster

    - name: debug
      debug: msg="Master K3S token is {{ K3S_TOKEN }}"

# ###################
# Worker setup
# ###################        

  - name: Worker setup
    hosts: workers
    become: yes
    become_user: root
    tasks:
    - name: Get K3S_TOKEN
      set_fact:
        K3S_TOKEN: "{{ hostvars['emaster']['K3S_TOKEN']}}"
    - name: Install k3s worker
      shell: curl -sfL https://get.k3s.io | K3S_URL=https://emaster:6443 K3S_TOKEN={{ K3S_TOKEN }} INSTALL_K3S_EXEC="--node-ip={{private_ip}} --flannel-iface={{ private_interface }}" sh -
      register: cmd
    - debug: var=cmd.stdout_lines
    - name: Enable k3s agent
      systemd:
        state: started
        enabled: yes
        name: k3s-agent

# ####################
# Integrate workers into cluster
# ####################

  - name: Verify cluster
    hosts: masters
    become: yes
    become_user: root
    tasks:

    - name: Label worker nodes
      shell:
        cmd: k3s kubectl label node {{ item }} node-role.kubernetes.io/worker=worker
      with_items: "{{ groups.workers }}"
    - name: Check cluster status 
      shell: |
        kubectl get nodes
        kubectl cluster-info
        kubectl get namespaces
        kubectl get endpoints -n kube-system
        kubectl get pods -n kube-system
      register: cmd
      changed_when: false
    - debug: var=cmd.stdout_lines




